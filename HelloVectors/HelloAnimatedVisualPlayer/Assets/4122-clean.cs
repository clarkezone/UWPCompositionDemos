//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Xaml.Controls;
using System;
using System.Numerics;
using Windows.UI;
using Windows.UI.Composition;

namespace AnimatedVisuals
{
    sealed class User_friendly_interface : IAnimatedVisualSource
    {
        public IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;
            if (!IsRuntimeCompatible())
            {
                return null;
            }
            return new AnimatedVisual(compositor);
        }

        static bool IsRuntimeCompatible()
        {
            if (!Windows.Foundation.Metadata.ApiInformation.IsTypePresent("Windows.UI.Composition.CompositionGeometricClip"))
            {
                return false;
            }
            return true;
        }

        sealed class AnimatedVisual : IAnimatedVisual
        {
            const long c_durationTicks = 15000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CompositionColorBrush _animatedColorBrush_TransparentAlmostTomato_00FF3940_to_TransparentAlmostTomato_00FF3940_0;
            CompositionColorBrush _animatedColorBrush_TransparentAlmostTomato_00FF3940_to_TransparentAlmostTomato_00FF3940_1;
            CubicBezierEasingFunction _cubicBezierEasingFunction;
            StepEasingFunction _holdThenStepEasingFunction;
            CompositionPathGeometry _pathGeometry_1;
            ContainerVisual _root;
            ExpressionAnimation _scalarExpressionAnimation;
            StepEasingFunction _stepThenHoldEasingFunction;

            // ShapeGroup: Ellipse 1
            //   Ellipse Path 1
            CompositionColorBrush AnimatedColorBrush_AlmostWhiteSmoke_FFEFEFEF_to_TransparentAlmostWhiteSmoke_00EFEFEF()
            {
                var result = _c.CreateColorBrush(Color.FromArgb(0xFF, 0xEF, 0xEF, 0xEF));
                result.StartAnimation("Color", ColorAnimation_AlmostWhiteSmoke_FFEFEFEF_to_TransparentAlmostWhiteSmoke_00EFEFEF());
                var controller = result.TryGetAnimationController("Color");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // ShapeGroup: Ellipse 1
            //   Ellipse Path 1
            CompositionColorBrush AnimatedColorBrush_AlmostWhiteSmoke_FFF6F6F6_to_TransparentAlmostWhiteSmoke_00F6F6F6()
            {
                var result = _c.CreateColorBrush(Color.FromArgb(0xFF, 0xF6, 0xF6, 0xF6));
                result.StartAnimation("Color", ColorAnimation_AlmostWhiteSmoke_FFF6F6F6_to_TransparentAlmostWhiteSmoke_00F6F6F6());
                var controller = result.TryGetAnimationController("Color");
                controller.Pause();
                controller.StartAnimation("Progress", ScalarExpressionAnimation());
                return result;
            }

            // ShapeGroup: Shape 1
            //   Path 1
            CompositionColorBrush AnimatedColorBrush_TransparentAlmostTomato_00FF3940_to_SemiTransparentAlmostTomato_11FF3940()
            {
                var result = _c.CreateColorBrush(Color.FromArgb(0x00, 0xFF, 0x39, 0x40));
                result.StartAnimation("Color", ColorAnimation_TransparentAlmostTomato_00FF3940_to_SemiTransparentAlmostTomato_11FF3940());
                var controller = result.TryGetAnimationController("Color");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            CompositionColorBrush AnimatedColorBrush_TransparentAlmostTomato_00FF3940_to_TransparentAlmostTomato_00FF3940_0()
            {
                var result = _animatedColorBrush_TransparentAlmostTomato_00FF3940_to_TransparentAlmostTomato_00FF3940_0 = _c.CreateColorBrush(Color.FromArgb(0x00, 0xFF, 0x39, 0x40));
                result.StartAnimation("Color", ColorAnimation_TransparentAlmostTomato_00FF3940_to_TransparentAlmostTomato_00FF3940_0());
                var controller = result.TryGetAnimationController("Color");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            CompositionColorBrush AnimatedColorBrush_TransparentAlmostTomato_00FF3940_to_TransparentAlmostTomato_00FF3940_1()
            {
                var result = _animatedColorBrush_TransparentAlmostTomato_00FF3940_to_TransparentAlmostTomato_00FF3940_1 = _c.CreateColorBrush(Color.FromArgb(0x00, 0xFF, 0x39, 0x40));
                result.StartAnimation("Color", ColorAnimation_TransparentAlmostTomato_00FF3940_to_TransparentAlmostTomato_00FF3940_1());
                var controller = result.TryGetAnimationController("Color");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // Color
            ColorKeyFrameAnimation ColorAnimation_AlmostWhiteSmoke_FFEFEFEF_to_TransparentAlmostWhiteSmoke_00EFEFEF()
            {
                var result = _c.CreateColorKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                // AlmostWhiteSmoke_FFEFEFEF
                result.InsertKeyFrame(0, Color.FromArgb(0xFF, 0xEF, 0xEF, 0xEF), _holdThenStepEasingFunction);
                // AlmostWhiteSmoke_FFEFEFEF
                result.InsertKeyFrame(0.888888896F, Color.FromArgb(0xFF, 0xEF, 0xEF, 0xEF), _holdThenStepEasingFunction);
                // TransparentAlmostWhiteSmoke_00EFEFEF
                result.InsertKeyFrame(1, Color.FromArgb(0x00, 0xEF, 0xEF, 0xEF), _cubicBezierEasingFunction);
                return result;
            }

            // Color
            ColorKeyFrameAnimation ColorAnimation_AlmostWhiteSmoke_FFF6F6F6_to_TransparentAlmostWhiteSmoke_00F6F6F6()
            {
                var result = _c.CreateColorKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                // AlmostWhiteSmoke_FFF6F6F6
                result.InsertKeyFrame(0, Color.FromArgb(0xFF, 0xF6, 0xF6, 0xF6), HoldThenStepEasingFunction());
                // AlmostWhiteSmoke_FFF6F6F6
                result.InsertKeyFrame(0.888888896F, Color.FromArgb(0xFF, 0xF6, 0xF6, 0xF6), _holdThenStepEasingFunction);
                // TransparentAlmostWhiteSmoke_00F6F6F6
                result.InsertKeyFrame(1, Color.FromArgb(0x00, 0xF6, 0xF6, 0xF6), CubicBezierEasingFunction());
                return result;
            }

            // Color
            ColorKeyFrameAnimation ColorAnimation_TransparentAlmostTomato_00FF3940_to_SemiTransparentAlmostTomato_11FF3940()
            {
                var result = _c.CreateColorKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                // TransparentAlmostTomato_00FF3940
                result.InsertKeyFrame(0, Color.FromArgb(0x00, 0xFF, 0x39, 0x40), _stepThenHoldEasingFunction);
                // TransparentAlmostTomato_00FF3940
                result.InsertKeyFrame(0.388888896F, Color.FromArgb(0x00, 0xFF, 0x39, 0x40), _holdThenStepEasingFunction);
                // AlmostTomato_FFFF3940
                result.InsertKeyFrame(0.5F, Color.FromArgb(0xFF, 0xFF, 0x39, 0x40), _cubicBezierEasingFunction);
                // AlmostTomato_FFFF3940
                result.InsertKeyFrame(0.666666687F, Color.FromArgb(0xFF, 0xFF, 0x39, 0x40), _cubicBezierEasingFunction);
                // SemiTransparentAlmostTomato_11FF3940
                result.InsertKeyFrame(0.777777791F, Color.FromArgb(0x11, 0xFF, 0x39, 0x40), _cubicBezierEasingFunction);
                return result;
            }

            // Color
            ColorKeyFrameAnimation ColorAnimation_TransparentAlmostTomato_00FF3940_to_TransparentAlmostTomato_00FF3940_0()
            {
                var result = _c.CreateColorKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                // TransparentAlmostTomato_00FF3940
                result.InsertKeyFrame(0, Color.FromArgb(0x00, 0xFF, 0x39, 0x40), StepThenHoldEasingFunction());
                // TransparentAlmostTomato_00FF3940
                result.InsertKeyFrame(0.222222224F, Color.FromArgb(0x00, 0xFF, 0x39, 0x40), _holdThenStepEasingFunction);
                // AlmostTomato_FFFF3940
                result.InsertKeyFrame(0.333333343F, Color.FromArgb(0xFF, 0xFF, 0x39, 0x40), _cubicBezierEasingFunction);
                // AlmostTomato_FFFF3940
                result.InsertKeyFrame(0.777777791F, Color.FromArgb(0xFF, 0xFF, 0x39, 0x40), _cubicBezierEasingFunction);
                // TransparentAlmostTomato_00FF3940
                result.InsertKeyFrame(0.888888896F, Color.FromArgb(0x00, 0xFF, 0x39, 0x40), _cubicBezierEasingFunction);
                return result;
            }

            // Color
            ColorKeyFrameAnimation ColorAnimation_TransparentAlmostTomato_00FF3940_to_TransparentAlmostTomato_00FF3940_1()
            {
                var result = _c.CreateColorKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                // TransparentAlmostTomato_00FF3940
                result.InsertKeyFrame(0, Color.FromArgb(0x00, 0xFF, 0x39, 0x40), _stepThenHoldEasingFunction);
                // TransparentAlmostTomato_00FF3940
                result.InsertKeyFrame(0.333333343F, Color.FromArgb(0x00, 0xFF, 0x39, 0x40), _holdThenStepEasingFunction);
                // AlmostTomato_FFFF3940
                result.InsertKeyFrame(0.444444448F, Color.FromArgb(0xFF, 0xFF, 0x39, 0x40), _cubicBezierEasingFunction);
                // AlmostTomato_FFFF3940
                result.InsertKeyFrame(0.722222209F, Color.FromArgb(0xFF, 0xFF, 0x39, 0x40), _cubicBezierEasingFunction);
                // TransparentAlmostTomato_00FF3940
                result.InsertKeyFrame(0.833333313F, Color.FromArgb(0x00, 0xFF, 0x39, 0x40), _cubicBezierEasingFunction);
                return result;
            }

            // ShapeGroup: Ellipse 1
            //   Ellipse Path 1
            CompositionColorBrush ColorBrush_TransparentAlmostCrimson_00F1353D()
            {
                return _c.CreateColorBrush(Color.FromArgb(0x00, 0xF1, 0x35, 0x3D));
            }

            // Layer (Shape): BG Border
            CompositionContainerShape ContainerShape_00()
            {
                var result = _c.CreateContainerShape();
                var propertySet = result.Properties;
                propertySet.InsertVector2("Anchor", new Vector2(0, 0));
                propertySet.InsertVector2("Position", new Vector2(278.5F, 276.5F));
                result.Scale = new Vector2(0.439999998F, 0.439999998F);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_01());
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("CenterPoint", _reusableExpressionAnimation);
                result.StartAnimation("Position", Vector2Animation_00());
                var controller = result.TryGetAnimationController("Position");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("Offset", _reusableExpressionAnimation);
                result.StartAnimation("Scale", Vector2Animation_01());
                controller = result.TryGetAnimationController("Scale");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // ShapeGroup: Ellipse 1
            CompositionContainerShape ContainerShape_01()
            {
                var result = _c.CreateContainerShape();
                var propertySet = result.Properties;
                propertySet.InsertVector2("Anchor", new Vector2(0, 0));
                propertySet.InsertVector2("Position", new Vector2(-3.5F, -1.5F));
                var shapes = result.Shapes;
                shapes.Add(SpriteShape_0());
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("CenterPoint", _reusableExpressionAnimation);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Layer (Shape): BG Fill
            CompositionContainerShape ContainerShape_02()
            {
                var result = _c.CreateContainerShape();
                var propertySet = result.Properties;
                propertySet.InsertVector2("Anchor", new Vector2(0, 0));
                propertySet.InsertVector2("Position", new Vector2(276.110992F, 271.5F));
                result.Scale = new Vector2(0.159999996F, 0.159999996F);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_03());
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("CenterPoint", _reusableExpressionAnimation);
                result.StartAnimation("Position", Vector2Animation_02());
                var controller = result.TryGetAnimationController("Position");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("Offset", _reusableExpressionAnimation);
                result.StartAnimation("Scale", Vector2Animation_03());
                controller = result.TryGetAnimationController("Scale");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // ShapeGroup: Ellipse 1
            CompositionContainerShape ContainerShape_03()
            {
                var result = _c.CreateContainerShape();
                var propertySet = result.Properties;
                propertySet.InsertVector2("Anchor", new Vector2(0, 0));
                propertySet.InsertVector2("Position", new Vector2(-1.11099994F, 3.5F));
                var shapes = result.Shapes;
                shapes.Add(SpriteShape_1());
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("CenterPoint", _reusableExpressionAnimation);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Layer (Shape): empty_fram Outlines
            CompositionContainerShape ContainerShape_04()
            {
                var result = _c.CreateContainerShape();
                result.TransformMatrix = new Matrix3x2(0, 0, 0, 0, 0, 0);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_05());
                result.StartAnimation("TransformMatrix._11", ScalarAnimation_to_1_0());
                var controller = result.TryGetAnimationController("TransformMatrix._11");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.TransformMatrix._11";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
                return result;
            }

            CompositionContainerShape ContainerShape_05()
            {
                var result = _c.CreateContainerShape();
                var propertySet = result.Properties;
                propertySet.InsertVector2("Anchor", new Vector2(144, 240));
                propertySet.InsertVector2("Position", new Vector2(275, 275));
                result.RotationAngleInDegrees = 65;
                result.Scale = new Vector2(0.611109972F, 0.611109972F);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_06());
                shapes.Add(ContainerShape_07());
                shapes.Add(ContainerShape_08());
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("CenterPoint", _reusableExpressionAnimation);
                result.StartAnimation("Position", Vector2Animation_04());
                var controller = result.TryGetAnimationController("Position");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("Offset", _reusableExpressionAnimation);
                result.StartAnimation("Scale", Vector2Animation_05());
                controller = result.TryGetAnimationController("Scale");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                result.StartAnimation("RotationAngleInDegrees", ScalarAnimation_65_to_0());
                controller = result.TryGetAnimationController("RotationAngleInDegrees");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // ShapeGroup: Group 3
            CompositionContainerShape ContainerShape_06()
            {
                var result = _c.CreateContainerShape();
                var propertySet = result.Properties;
                propertySet.InsertVector2("Anchor", new Vector2(0, 0));
                propertySet.InsertVector2("Position", new Vector2(144, 240));
                var shapes = result.Shapes;
                shapes.Add(SpriteShape_2());
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("CenterPoint", _reusableExpressionAnimation);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // ShapeGroup: Group 2
            CompositionContainerShape ContainerShape_07()
            {
                var result = _c.CreateContainerShape();
                var propertySet = result.Properties;
                propertySet.InsertVector2("Anchor", new Vector2(0, 0));
                propertySet.InsertVector2("Position", new Vector2(144, 424));
                var shapes = result.Shapes;
                shapes.Add(SpriteShape_3());
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("CenterPoint", _reusableExpressionAnimation);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // ShapeGroup: Group 1
            CompositionContainerShape ContainerShape_08()
            {
                var result = _c.CreateContainerShape();
                var propertySet = result.Properties;
                propertySet.InsertVector2("Anchor", new Vector2(0, 0));
                propertySet.InsertVector2("Position", new Vector2(144, 32));
                var shapes = result.Shapes;
                shapes.Add(SpriteShape_4());
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("CenterPoint", _reusableExpressionAnimation);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Layer (Shape): u_i Outlines
            CompositionContainerShape ContainerShape_09()
            {
                var result = _c.CreateContainerShape();
                result.TransformMatrix = new Matrix3x2(0, 0, 0, 0, 0, 0);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_10());
                result.StartAnimation("TransformMatrix._11", ScalarAnimation_to_1_1());
                var controller = result.TryGetAnimationController("TransformMatrix._11");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.TransformMatrix._11";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
                return result;
            }

            CompositionContainerShape ContainerShape_10()
            {
                var result = _c.CreateContainerShape();
                var propertySet = result.Properties;
                propertySet.InsertVector2("Anchor", new Vector2(683, 384));
                propertySet.InsertVector2("Position", new Vector2(275, 245));
                result.Scale = new Vector2(4.43110991F, 4.43110991F);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_11());
                shapes.Add(ContainerShape_12());
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("CenterPoint", _reusableExpressionAnimation);
                result.StartAnimation("Position", Vector2Animation_06());
                var controller = result.TryGetAnimationController("Position");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("Offset", _reusableExpressionAnimation);
                result.StartAnimation("Scale", Vector2Animation_07());
                controller = result.TryGetAnimationController("Scale");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // ShapeGroup: Group 2
            CompositionContainerShape ContainerShape_11()
            {
                var result = _c.CreateContainerShape();
                var propertySet = result.Properties;
                propertySet.InsertVector2("Anchor", new Vector2(0, 0));
                propertySet.InsertVector2("Position", new Vector2(683, 357));
                var shapes = result.Shapes;
                shapes.Add(SpriteShape_5());
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("CenterPoint", _reusableExpressionAnimation);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // ShapeGroup: Group 1
            CompositionContainerShape ContainerShape_12()
            {
                var result = _c.CreateContainerShape();
                var propertySet = result.Properties;
                propertySet.InsertVector2("Anchor", new Vector2(0, 0));
                propertySet.InsertVector2("Position", new Vector2(683, 391.299988F));
                var shapes = result.Shapes;
                shapes.Add(SpriteShape_6());
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("CenterPoint", _reusableExpressionAnimation);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Layer (Shape): Shape Layer 1
            CompositionContainerShape ContainerShape_13()
            {
                var result = _c.CreateContainerShape();
                result.TransformMatrix = new Matrix3x2(0, 0, 0, 0, 0, 0);
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_14());
                result.StartAnimation("TransformMatrix._11", ScalarAnimation_1_to_0());
                var controller = result.TryGetAnimationController("TransformMatrix._11");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.TransformMatrix._11";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("TransformMatrix._22", _reusableExpressionAnimation);
                return result;
            }

            CompositionContainerShape ContainerShape_14()
            {
                var result = _c.CreateContainerShape();
                var propertySet = result.Properties;
                propertySet.InsertVector2("Anchor", new Vector2(2, 78));
                propertySet.InsertVector2("Position", new Vector2(275.25F, 353.5F));
                result.RotationAngleInDegrees = -119;
                var shapes = result.Shapes;
                shapes.Add(ContainerShape_15());
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("CenterPoint", _reusableExpressionAnimation);
                result.StartAnimation("Position", Vector2Animation_08());
                var controller = result.TryGetAnimationController("Position");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("Offset", _reusableExpressionAnimation);
                result.StartAnimation("Scale", Vector2Animation_09());
                controller = result.TryGetAnimationController("Scale");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                result.StartAnimation("RotationAngleInDegrees", ScalarAnimation_m119_to_144());
                controller = result.TryGetAnimationController("RotationAngleInDegrees");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // ShapeGroup: Shape 1
            CompositionContainerShape ContainerShape_15()
            {
                var result = _c.CreateContainerShape();
                var propertySet = result.Properties;
                propertySet.InsertVector2("Anchor", new Vector2(0, 0));
                propertySet.InsertVector2("Position", new Vector2(0, 0));
                var shapes = result.Shapes;
                shapes.Add(SpriteShape_7());
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("CenterPoint", _reusableExpressionAnimation);
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation.SetReferenceParameter("my", result);
                result.StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction()
            {
                return _cubicBezierEasingFunction = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F));
            }

            // ShapeGroup: Ellipse 1
            //   Ellipse Path 1
            // Ellipse Path 1.EllipseGeometry
            CompositionEllipseGeometry Ellipse_188p5()
            {
                var result = _c.CreateEllipseGeometry();
                result.Radius = new Vector2(188.5F, 188.5F);
                return result;
            }

            // ShapeGroup: Ellipse 1
            //   Ellipse Path 1
            // Ellipse Path 1.EllipseGeometry
            CompositionEllipseGeometry Ellipse_208p5()
            {
                var result = _c.CreateEllipseGeometry();
                result.Radius = new Vector2(208.5F, 208.5F);
                return result;
            }

            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(104, -240));
                    builder.AddLine(new Vector2(-104, -240));
                    builder.AddCubicBezier(new Vector2(-126.081001F, -239.973999F), new Vector2(-143.973999F, -222.080994F), new Vector2(-144, -200));
                    builder.AddLine(new Vector2(-144, 200));
                    builder.AddCubicBezier(new Vector2(-143.973999F, 222.080002F), new Vector2(-126.081001F, 239.973999F), new Vector2(-104, 240));
                    builder.AddLine(new Vector2(104, 240));
                    builder.AddCubicBezier(new Vector2(126.080002F, 239.973999F), new Vector2(143.973999F, 222.080002F), new Vector2(144, 200));
                    builder.AddLine(new Vector2(144, -200));
                    builder.AddCubicBezier(new Vector2(143.973999F, -222.080994F), new Vector2(126.080002F, -239.973999F), new Vector2(104, -240));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    builder.BeginFigure(new Vector2(-104, -224));
                    builder.AddLine(new Vector2(104, -224));
                    builder.AddCubicBezier(new Vector2(117.254997F, -224), new Vector2(128, -213.255005F), new Vector2(128, -200));
                    builder.AddLine(new Vector2(128, -192));
                    builder.AddLine(new Vector2(-128, -192));
                    builder.AddLine(new Vector2(-128, -200));
                    builder.AddCubicBezier(new Vector2(-128, -213.255005F), new Vector2(-117.254997F, -224), new Vector2(-104, -224));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    builder.BeginFigure(new Vector2(104, 224));
                    builder.AddLine(new Vector2(-104, 224));
                    builder.AddCubicBezier(new Vector2(-117.254997F, 224), new Vector2(-128, 213.255005F), new Vector2(-128, 200));
                    builder.AddLine(new Vector2(-128, 192));
                    builder.AddLine(new Vector2(-24, 192));
                    builder.AddLine(new Vector2(-24, 176));
                    builder.AddLine(new Vector2(-128, 176));
                    builder.AddLine(new Vector2(-128, -176));
                    builder.AddLine(new Vector2(128, -176));
                    builder.AddLine(new Vector2(128, 176));
                    builder.AddLine(new Vector2(24, 176));
                    builder.AddLine(new Vector2(24, 192));
                    builder.AddLine(new Vector2(128, 192));
                    builder.AddLine(new Vector2(128, 200));
                    builder.AddCubicBezier(new Vector2(128, 213.255005F), new Vector2(117.254997F, 224), new Vector2(104, 224));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-8, 8));
                    builder.AddLine(new Vector2(-8, -8));
                    builder.AddLine(new Vector2(8, -8));
                    builder.AddLine(new Vector2(8, 8));
                    builder.AddLine(new Vector2(-8, 8));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-16, 0));
                    builder.AddCubicBezier(new Vector2(-16, -8.83600044F), new Vector2(-8.83600044F, -16), new Vector2(0, -16));
                    builder.AddCubicBezier(new Vector2(8.83699989F, -16), new Vector2(16, -8.83600044F), new Vector2(16, 0));
                    builder.AddCubicBezier(new Vector2(16, 8.83699989F), new Vector2(8.83699989F, 16), new Vector2(0, 16));
                    builder.AddCubicBezier(new Vector2(-8.83600044F, 16), new Vector2(-16, 8.83699989F), new Vector2(-16, 0));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    builder.BeginFigure(new Vector2(-32, 0));
                    builder.AddCubicBezier(new Vector2(-32, 17.6730003F), new Vector2(-17.6730003F, 32), new Vector2(0, 32));
                    builder.AddCubicBezier(new Vector2(17.6720009F, 32), new Vector2(32, 17.6730003F), new Vector2(32, 0));
                    builder.AddCubicBezier(new Vector2(32, -17.6739998F), new Vector2(17.6720009F, -32), new Vector2(0, -32));
                    builder.AddCubicBezier(new Vector2(-17.6730003F, -32), new Vector2(-32, -17.6739998F), new Vector2(-32, 0));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-32.5439987F, 79.4039993F));
                    builder.AddCubicBezier(new Vector2(-33.7200012F, 78.9489975F), new Vector2(-34.8639984F, 78.4120026F), new Vector2(-36.0159988F, 77.9000015F));
                    builder.AddCubicBezier(new Vector2(-37.3839989F, 77.3000031F), new Vector2(-38.7120018F, 76.6119995F), new Vector2(-40.0159988F, 75.9329987F));
                    builder.AddLine(new Vector2(-40.0159988F, 53.7000008F));
                    builder.AddCubicBezier(new Vector2(-39.9900017F, 31.6200008F), new Vector2(-22.0970001F, 13.7259998F), new Vector2(-0.0160000008F, 13.6999998F));
                    builder.AddCubicBezier(new Vector2(22.0580006F, 13.7399998F), new Vector2(39.9440002F, 31.625F), new Vector2(39.9840012F, 53.7000008F));
                    builder.AddLine(new Vector2(39.9840012F, 75.9329987F));
                    builder.AddCubicBezier(new Vector2(38.6489983F, 76.6119995F), new Vector2(37.3199997F, 77.3000031F), new Vector2(35.9850006F, 77.9000015F));
                    builder.AddCubicBezier(new Vector2(34.8320007F, 78.4120026F), new Vector2(33.6889992F, 78.9489975F), new Vector2(32.512001F, 79.4039993F));
                    builder.AddCubicBezier(new Vector2(29.9039993F, 80.4199982F), new Vector2(27.2479992F, 81.276001F), new Vector2(24.552F, 82.0360031F));
                    builder.AddCubicBezier(new Vector2(23.7520008F, 82.2519989F), new Vector2(23.0249996F, 82.5159988F), new Vector2(22.2560005F, 82.7080002F));
                    builder.AddCubicBezier(new Vector2(7.65399981F, 86.3560028F), new Vector2(-7.62200022F, 86.3560028F), new Vector2(-22.2240009F, 82.7080002F));
                    builder.AddCubicBezier(new Vector2(-23.0079994F, 82.5F), new Vector2(-23.7679996F, 82.2519989F), new Vector2(-24.5359993F, 82.0360031F));
                    builder.AddLine(new Vector2(-24.5440006F, 82.0360031F));
                    builder.AddCubicBezier(new Vector2(-27.2399998F, 81.276001F), new Vector2(-29.8959999F, 80.435997F), new Vector2(-32.5439987F, 79.4039993F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    builder.BeginFigure(new Vector2(-88, -2.29999995F));
                    builder.AddCubicBezier(new Vector2(-88.0849991F, -50.901001F), new Vector2(-48.7560005F, -90.3679962F), new Vector2(-0.155000001F, -90.4540024F));
                    builder.AddCubicBezier(new Vector2(48.4459991F, -90.5400009F), new Vector2(87.9150009F, -51.2089996F), new Vector2(88, -2.60899997F));
                    builder.AddCubicBezier(new Vector2(88.0459976F, 23.7150002F), new Vector2(76.3059998F, 48.6769981F), new Vector2(56, 65.4280014F));
                    builder.AddLine(new Vector2(56, 53.7000008F));
                    builder.AddCubicBezier(new Vector2(55.9599991F, 22.7889996F), new Vector2(30.9109993F, -2.25999999F), new Vector2(0, -2.29999995F));
                    builder.AddCubicBezier(new Vector2(-30.9109993F, -2.25999999F), new Vector2(-55.9599991F, 22.7889996F), new Vector2(-56, 53.7000008F));
                    builder.AddLine(new Vector2(-56, 65.4280014F));
                    builder.AddCubicBezier(new Vector2(-76.1900024F, 48.7200012F), new Vector2(-87.9140015F, 23.9060001F), new Vector2(-88, -2.29999995F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    builder.BeginFigure(new Vector2(-56, -89.939003F));
                    builder.AddCubicBezier(new Vector2(-104.400002F, -59.012001F), new Vector2(-118.563004F, 5.29699993F), new Vector2(-87.6360016F, 53.6959991F));
                    builder.AddCubicBezier(new Vector2(-79.5100021F, 66.4120026F), new Vector2(-68.7149963F, 77.2070007F), new Vector2(-56, 85.3320007F));
                    builder.AddLine(new Vector2(-56, 85.5169983F));
                    builder.AddLine(new Vector2(-52, 87.8280029F));
                    builder.AddCubicBezier(new Vector2(-19.7989998F, 106.318001F), new Vector2(19.7989998F, 106.318001F), new Vector2(52, 87.8280029F));
                    builder.AddLine(new Vector2(56, 85.5169983F));
                    builder.AddLine(new Vector2(56, 85.3320007F));
                    builder.AddCubicBezier(new Vector2(104.399002F, 54.4039993F), new Vector2(118.563004F, -9.90400028F), new Vector2(87.6360016F, -58.3030014F));
                    builder.AddCubicBezier(new Vector2(67.7939987F, -89.3539963F), new Vector2(34.2060013F, -106.314003F), new Vector2(-0.0979999974F, -106.317001F));
                    builder.AddCubicBezier(new Vector2(-19.2649994F, -106.318001F), new Vector2(-38.651001F, -101.026001F), new Vector2(-56, -89.939003F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(23, 48));
                    builder.AddLine(new Vector2(1, 72.5F));
                    builder.AddLine(new Vector2(-10.5F, 62.5F));
                    builder.AddLine(new Vector2(-17, 68.5F));
                    builder.AddLine(new Vector2(0, 86));
                    builder.AddLine(new Vector2(31, 55));
                    builder.AddLine(new Vector2(23, 48));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame  = true;
                return result;
            }

            CompositionPathGeometry PathGeometry_0()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_1()
            {
                var result = _pathGeometry_1 = _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
                return result;
            }

            CompositionPathGeometry PathGeometry_2()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
                return result;
            }

            CompositionPathGeometry PathGeometry_3()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_3()));
                return result;
            }

            // ShapeGroup: Shape 1
            //   Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_4()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_4()));
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0);
                var children = result.Children;
                children.InsertAtTop(ShapeVisual());
                return result;
            }

            // Layer (Shape): Shape Layer 1
            ScalarKeyFrameAnimation ScalarAnimation_1_to_0()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0.388888896F, 1, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.777777791F, 0, _holdThenStepEasingFunction);
                return result;
            }

            // RotationAngleInDegrees
            ScalarKeyFrameAnimation ScalarAnimation_65_to_0()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 65, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.222222224F, 65, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.333333343F, 0, _cubicBezierEasingFunction);
                return result;
            }

            // RotationAngleInDegrees
            ScalarKeyFrameAnimation ScalarAnimation_m119_to_144()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, -119, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.388888896F, -119, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.5F, 0, _cubicBezierEasingFunction);
                result.InsertKeyFrame(0.666666687F, 0, _cubicBezierEasingFunction);
                result.InsertKeyFrame(0.777777791F, 144, _cubicBezierEasingFunction);
                return result;
            }

            // Layer (Shape): empty_fram Outlines
            ScalarKeyFrameAnimation ScalarAnimation_to_1_0()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0.222222224F, 1, _holdThenStepEasingFunction);
                return result;
            }

            // Layer (Shape): u_i Outlines
            ScalarKeyFrameAnimation ScalarAnimation_to_1_1()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0.333333343F, 1, _holdThenStepEasingFunction);
                return result;
            }

            ExpressionAnimation ScalarExpressionAnimation()
            {
                var result = _scalarExpressionAnimation = _c.CreateExpressionAnimation();
                result.SetReferenceParameter("_", _root);
                result.Expression = "_.Progress";
                return result;
            }

            ShapeVisual ShapeVisual()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(550, 550);
                var shapes = result.Shapes;
                // Layer (Shape): BG Border
                shapes.Add(ContainerShape_00());
                // Layer (Shape): BG Fill
                shapes.Add(ContainerShape_02());
                // Layer (Shape): empty_fram Outlines
                shapes.Add(ContainerShape_04());
                // Layer (Shape): u_i Outlines
                shapes.Add(ContainerShape_09());
                // Layer (Shape): Shape Layer 1
                shapes.Add(ContainerShape_13());
                return result;
            }

            // ShapeGroup: Ellipse 1
            // Ellipse Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape();
                result.FillBrush = ColorBrush_TransparentAlmostCrimson_00F1353D();
                result.Geometry = Ellipse_208p5();
                result.StrokeBrush = AnimatedColorBrush_AlmostWhiteSmoke_FFF6F6F6_to_TransparentAlmostWhiteSmoke_00F6F6F6();
                result.StrokeMiterLimit = 4;
                result.StrokeThickness = 13;
                return result;
            }

            // ShapeGroup: Ellipse 1
            // Ellipse Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape();
                result.FillBrush = AnimatedColorBrush_AlmostWhiteSmoke_FFEFEFEF_to_TransparentAlmostWhiteSmoke_00EFEFEF();
                result.Geometry = Ellipse_188p5();
                return result;
            }

            // ShapeGroup: Group 3
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape();
                result.FillBrush = AnimatedColorBrush_TransparentAlmostTomato_00FF3940_to_TransparentAlmostTomato_00FF3940_0();
                result.Geometry = PathGeometry_0();
                return result;
            }

            // ShapeGroup: Group 2
            // Path 1
            CompositionSpriteShape SpriteShape_3()
            {
                var result = _c.CreateSpriteShape();
                result.FillBrush = _animatedColorBrush_TransparentAlmostTomato_00FF3940_to_TransparentAlmostTomato_00FF3940_0;
                result.Geometry = PathGeometry_1();
                return result;
            }

            // ShapeGroup: Group 1
            // Path 1
            CompositionSpriteShape SpriteShape_4()
            {
                var result = _c.CreateSpriteShape();
                result.FillBrush = _animatedColorBrush_TransparentAlmostTomato_00FF3940_to_TransparentAlmostTomato_00FF3940_0;
                result.Geometry = _pathGeometry_1;
                return result;
            }

            // ShapeGroup: Group 2
            CompositionSpriteShape SpriteShape_5()
            {
                var result = _c.CreateSpriteShape();
                result.FillBrush = AnimatedColorBrush_TransparentAlmostTomato_00FF3940_to_TransparentAlmostTomato_00FF3940_1();
                result.Geometry = PathGeometry_2();
                return result;
            }

            // ShapeGroup: Group 1
            CompositionSpriteShape SpriteShape_6()
            {
                var result = _c.CreateSpriteShape();
                result.FillBrush = _animatedColorBrush_TransparentAlmostTomato_00FF3940_to_TransparentAlmostTomato_00FF3940_1;
                result.Geometry = PathGeometry_3();
                return result;
            }

            // ShapeGroup: Shape 1
            // Path 1
            CompositionSpriteShape SpriteShape_7()
            {
                var result = _c.CreateSpriteShape();
                result.FillBrush = AnimatedColorBrush_TransparentAlmostTomato_00FF3940_to_SemiTransparentAlmostTomato_11FF3940();
                result.Geometry = PathGeometry_4();
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame  = true;
                return result;
            }

            // Layer (Shape): BG Border
            // Position
            Vector2KeyFrameAnimation Vector2Animation_00()
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, new Vector2(278.5F, 276.5F), _holdThenStepEasingFunction);
                return result;
            }

            // Layer (Shape): BG Border
            // Scale
            Vector2KeyFrameAnimation Vector2Animation_01()
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, new Vector2(0.439999998F, 0.439999998F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.222222224F, new Vector2(1, 1), _cubicBezierEasingFunction);
                return result;
            }

            // Layer (Shape): BG Fill
            // Position
            Vector2KeyFrameAnimation Vector2Animation_02()
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, new Vector2(276.110992F, 271.5F), _holdThenStepEasingFunction);
                return result;
            }

            // Layer (Shape): BG Fill
            // Scale
            Vector2KeyFrameAnimation Vector2Animation_03()
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, new Vector2(0.159999996F, 0.159999996F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.222222224F, new Vector2(1, 1), _cubicBezierEasingFunction);
                return result;
            }

            // Position
            Vector2KeyFrameAnimation Vector2Animation_04()
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, new Vector2(275, 275), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.222222224F, new Vector2(275, 275), _holdThenStepEasingFunction);
                return result;
            }

            // Scale
            Vector2KeyFrameAnimation Vector2Animation_05()
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, new Vector2(0.611109972F, 0.611109972F), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.222222224F, new Vector2(0.611109972F, 0.611109972F), _holdThenStepEasingFunction);
                return result;
            }

            // Position
            Vector2KeyFrameAnimation Vector2Animation_06()
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, new Vector2(275, 245), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.333333343F, new Vector2(275, 245), _holdThenStepEasingFunction);
                return result;
            }

            // Scale
            Vector2KeyFrameAnimation Vector2Animation_07()
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, new Vector2(4.43110991F, 4.43110991F), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.333333343F, new Vector2(4.43110991F, 4.43110991F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.444444448F, new Vector2(0.611109972F, 0.611109972F), _cubicBezierEasingFunction);
                result.InsertKeyFrame(0.722222209F, new Vector2(0.611109972F, 0.611109972F), _cubicBezierEasingFunction);
                result.InsertKeyFrame(0.833333313F, new Vector2(0.00110999995F, 0.00110999995F), _cubicBezierEasingFunction);
                return result;
            }

            // Position
            Vector2KeyFrameAnimation Vector2Animation_08()
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, new Vector2(275.25F, 353.5F), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.388888896F, new Vector2(275.25F, 353.5F), _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.5F, new Vector2(275, 353.5F), _cubicBezierEasingFunction);
                return result;
            }

            // Scale
            Vector2KeyFrameAnimation Vector2Animation_09()
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, new Vector2(1, 1), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.388888896F, new Vector2(1, 1), _holdThenStepEasingFunction);
                return result;
            }

            internal AnimatedVisual(Compositor compositor)
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            Visual IAnimatedVisual.RootVisual => _root;
            TimeSpan IAnimatedVisual.Duration => TimeSpan.FromTicks(c_durationTicks);
            Vector2 IAnimatedVisual.Size => new Vector2(550, 550);
            void IDisposable.Dispose() => _root?.Dispose();
        }
    }
}
